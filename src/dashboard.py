import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import os
import sys

from user import get_wallets  
from ingestion import enrich_wallet_with_price  # ou incluez la fonction enrich_wallet_with_price ici
from ai_utils import ask_portfolio_question, suggest_optimized_allocation  # nouveau

# Titre du dashboard
st.title("InvestmentWallet - Dashboard")

st.header("Portefeuille de l'utilisateur")
st.markdown("Voici la liste des wallets r√©cup√©r√©s via l'API Bitpanda.")

# R√©cup√©ration des donn√©es avec normalisation pour obtenir un DataFrame
try:
    df_wallets = get_wallets(process=True)
except Exception as e:
    st.error(f"Erreur lors de la r√©cup√©ration des wallets : {e}")
    st.stop()

# Afficher le DataFrame dans le dashboard
st.dataframe(df_wallets)

st.header("R√©partition du portefeuille")
# Filtrer les entr√©es dont la valeur totale n'est pas nulle ou manquante
df_valid = df_wallets.dropna(subset=["total_value"])
df_valid = df_valid[df_valid["total_value"] > 0]

if df_valid.empty:
    st.warning("Aucun actif avec une valeur totale positive n'a √©t√© trouv√© pour le moment.")
else:
    # Agr√©ger la valeur totale par symbole (par exemple, BTC, ETH, etc.)
    aggregated = df_valid.groupby("symbol")["total_value"].sum()

    # Cr√©ation du graphique en camembert
    fig, ax = plt.subplots(figsize=(4, 3), dpi=100)
    ax.pie(aggregated, labels=aggregated.index, autopct='%1.1f%%', startangle=90, textprops={'fontsize': 5})
    
    fig.tight_layout()

    # Afficher le graphique dans Streamlit
    st.pyplot(fig)


st.header("ü§ñ Assistant IA - Portfolio Chat")

# Interface de chat
with st.expander("Poser une question sur votre portefeuille"):
    user_question = st.text_input("Posez votre question ici (ex : Quel est mon actif le plus rentable ?)")
    if user_question:
        with st.spinner("L'IA r√©fl√©chit..."):
            try:
                answer = ask_portfolio_question(df_wallets, user_question)
                st.markdown("**R√©ponse de l'assistant :**")
                st.markdown(answer)
            except Exception as e:
                st.error(f"Erreur lors de l'appel √† l'IA : {e}")

# Suggestion d'allocation optimis√©e
with st.expander("üí° Demander une allocation optimis√©e"):
    if st.button("G√©n√©rer une proposition"):
        with st.spinner("L'IA analyse votre portefeuille..."):
            try:
                suggestion = suggest_optimized_allocation(df_wallets)
                st.markdown("**Suggestion d'allocation :**")
                st.markdown(suggestion)
            except Exception as e:
                st.error(f"Erreur IA : {e}")    

# Quelques indications suppl√©mentaires pour l'utilisateur
st.markdown(
    """
    **Instructions compl√©mentaires :**
    - Ce dashboard se met √† jour d√®s que vous actualisez la page.
    - Vous pouvez ajouter d'autres visualisations (courbes d'√©volution, indicateurs de performance, etc.)
      pour enrichir votre dashboard.
    """
)
